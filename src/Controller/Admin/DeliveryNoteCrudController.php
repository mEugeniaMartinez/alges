<?php

namespace App\Controller\Admin;

use App\Entity\DeliveryNote;
use App\Entity\User;
use ContainerKEaXiht\getResponseService;
use EasyCorp\Bundle\EasyAdminBundle\Config\Action;
use EasyCorp\Bundle\EasyAdminBundle\Config\Actions;
use EasyCorp\Bundle\EasyAdminBundle\Config\Crud;
use EasyCorp\Bundle\EasyAdminBundle\Context\AdminContext;
use EasyCorp\Bundle\EasyAdminBundle\Controller\AbstractCrudController;
use EasyCorp\Bundle\EasyAdminBundle\Field\AssociationField;
use EasyCorp\Bundle\EasyAdminBundle\Field\BooleanField;
use EasyCorp\Bundle\EasyAdminBundle\Field\DateField;
use EasyCorp\Bundle\EasyAdminBundle\Field\FormField;
use EasyCorp\Bundle\EasyAdminBundle\Field\TextareaField;
use EasyCorp\Bundle\EasyAdminBundle\Field\TextField;
class DeliveryNoteCrudController extends AbstractCrudController
{

    public static function getEntityFqcn(): string
    {
        return DeliveryNote::class;
    }

    public function configureFields(string $pageName): iterable
    {
        //yield Field::new('client');
        yield AssociationField::new('client', 'Cliente')
            ->autocomplete();
            //->setFormTypeOption('choice_label', 'name');
           /* ->formatValue(static function ($value, ?DeliveryNote $dn) {
                if (!$client = $dn->getClient()) {
                    return null;
                }
                return sprintf('%s&nbsp;[%s]', $client->getName(), $client->getDeliveryNotes()->count());
            });*/
        /* TODO - No se guarda el numero de albaran al generarlo y crear un DN nuevo
         * yield TextField::new('number', 'Nº Albarán')
            //->hideOnForm()
            ->formatValue(static function ($value, ?DeliveryNote $dn){
                if($dn->getNumber() != null){
                    return 'hli';
                }
                $dn->setNumber($dn->getId());
                return $dn->getNumber();
        });*/
        yield DateField::new('date', 'Fecha')
            ->setFormat('dd-MM-Y')
            ->setTextAlign('center');
        yield TextField::new('timeSpent', 'Tiempo empleado')
            ->hideOnIndex();
        yield TextareaField::new('material', 'Material entregado')
            ->hideOnIndex();
        yield TextareaField::new('faultDescription', 'Descripción de la avería')
            ->hideOnIndex();
        yield TextareaField::new('intervention', 'Intervención')
            ->hideOnIndex();
        yield BooleanField::new('signed', 'Firmado')
            ->hideOnForm()
            ->renderAsSwitch(false)
            ->setTextAlign('center');
        yield BooleanField::new('completed', 'Estado')
            ->hideOnForm()
            ->renderAsSwitch(false)
            ->setTextAlign('center');
        yield BooleanField::new('disabled', 'Anulado')
            ->hideOnForm()
            ->renderAsSwitch(false)
            ->setTextAlign('center');
    }

    //TODO - Poner acciones concretas de los albaranes
   /* public function configureActions(Actions $actions): Actions
    {
        return parent::configureActions($actions)
            //->add()
        ; // TODO: Change the autogenerated stub
    }*/

    public function configureCrud(Crud $crud): Crud
    {
        return parent::configureCrud($crud)
            ->setSearchFields(['date', 'client', 'number'])
            ->setPageTitle('new', 'Nuevo albarán')
            ->setPageTitle('index', 'Mis albaranes')
            ->setPageTitle('edit', 'Editar albarán')
            ->setPageTitle('detail', 'Detalles albarán');
    }

   /* public function configureActions(Actions $actions): Actions
    {

        return parent::configureActions($actions)
            ->update(Crud::PAGE_INDEX, Action::NEW, function (Action $action) {
                return $action->linkToCrudAction('setCurrentUser');
            }); // TODO: Change the autogenerated stub
    }

    public function setCurrentUser(AdminContext $context) :Response
    {
        $newDN = new DeliveryNote();
        $newDN->setUser($_SESSION['user_data']);
        $context->getEntity()->setInstance($newDN);
        //dd($context->getEntity()->getInstance());
        //$dn = $context->getEntity();
        //$dn->setUser($_SESSION['user_data']);
    }*/
}
